// 
// Warning: This file is automatically generated
// 

#include "indri/Walker.hpp"
#include "indri/QuerySpec.hpp"

namespace indri { 
  namespace lang { 
    Walker::~Walker() {}

    void Walker::defaultBefore( class Node* n ) {}
    void Walker::defaultAfter( class Node* n ) {}

   void Walker::before( class IndexTerm* n ) { defaultBefore( n ); }
   void Walker::after( class IndexTerm* n ) { defaultAfter( n ); }
   void Walker::before( class RawScorerNode* n ) { defaultBefore( n ); }
   void Walker::after( class RawScorerNode* n ) { defaultAfter( n ); }
   void Walker::before( class TermFrequencyScorerNode* n ) { defaultBefore( n ); }
   void Walker::after( class TermFrequencyScorerNode* n ) { defaultAfter( n ); }
   void Walker::before( class CombineNode* n ) { defaultBefore( n ); }
   void Walker::after( class CombineNode* n ) { defaultAfter( n ); }
   void Walker::before( class WeightNode* n ) { defaultBefore( n ); }
   void Walker::after( class WeightNode* n ) { defaultAfter( n ); }
   void Walker::before( class ContextCounterNode* n ) { defaultBefore( n ); }
   void Walker::after( class ContextCounterNode* n ) { defaultAfter( n ); }
   void Walker::before( class ContextSimpleCounterNode* n ) { defaultBefore( n ); }
   void Walker::after( class ContextSimpleCounterNode* n ) { defaultAfter( n ); }
   void Walker::before( class ScoreAccumulatorNode* n ) { defaultBefore( n ); }
   void Walker::after( class ScoreAccumulatorNode* n ) { defaultAfter( n ); }
   void Walker::before( class ContextInclusionNode* n ) { defaultBefore( n ); }
   void Walker::after( class ContextInclusionNode* n ) { defaultAfter( n ); }
 }
}

