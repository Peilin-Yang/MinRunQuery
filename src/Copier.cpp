// 
// Warning: This file is automatically generated
// 

#include "indri/Copier.hpp"
#include "indri/QuerySpec.hpp"

namespace indri { 
  namespace lang { 
    Copier::~Copier() {}

    void Copier::defaultBefore( class Node* oldNode ) {}
    Node* Copier::defaultAfter( class Node* oldNode, class Node* newNode ) { return newNode; }

    void Copier::before( class IndexTerm* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class IndexTerm* oldNode, class IndexTerm* newNode ) { return defaultAfter( oldNode, newNode ); }
    void Copier::before( class RawScorerNode* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class RawScorerNode* oldNode, class RawScorerNode* newNode ) { return defaultAfter( oldNode, newNode ); }
    void Copier::before( class TermFrequencyScorerNode* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class TermFrequencyScorerNode* oldNode, class TermFrequencyScorerNode* newNode ) { return defaultAfter( oldNode, newNode ); }
    void Copier::before( class CombineNode* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class CombineNode* oldNode, class CombineNode* newNode ) { return defaultAfter( oldNode, newNode ); }
    void Copier::before( class WeightNode* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class WeightNode* oldNode, class WeightNode* newNode ) { return defaultAfter( oldNode, newNode ); }
    void Copier::before( class ContextCounterNode* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class ContextCounterNode* oldNode, class ContextCounterNode* newNode ) { return defaultAfter( oldNode, newNode ); }
    void Copier::before( class ContextSimpleCounterNode* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class ContextSimpleCounterNode* oldNode, class ContextSimpleCounterNode* newNode ) { return defaultAfter( oldNode, newNode ); }
    void Copier::before( class ScoreAccumulatorNode* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class ScoreAccumulatorNode* oldNode, class ScoreAccumulatorNode* newNode ) { return defaultAfter( oldNode, newNode ); }
    void Copier::before( class ContextInclusionNode* oldNode ) { defaultBefore( oldNode ); }
    Node* Copier::after( class ContextInclusionNode* oldNode, class ContextInclusionNode* newNode ) { return defaultAfter( oldNode, newNode ); }
 }
}

